<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Util.Datas</name>
    </assembly>
    <members>
        <member name="T:Util.Datas.Dapper.Configs.SqlQueryConfig">
            <summary>
            Sql查询配置
            </summary>
        </member>
        <member name="P:Util.Datas.Dapper.Configs.SqlQueryConfig.DatabaseType">
            <summary>
            数据库类型，默认为Sql Server
            </summary>
        </member>
        <member name="T:Util.Datas.Dapper.Extensions">
            <summary>
            服务扩展
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.Extensions.AddSqlQuery(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Util.Datas.Dapper.Configs.SqlQueryConfig})">
            <summary>
            注册Sql查询服务
            </summary>
            <param name="services">服务集合</param>
            <param name="action">Sql查询配置</param>
        </member>
        <member name="M:Util.Datas.Dapper.Extensions.AddSqlQuery``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Util.Datas.Dapper.Configs.SqlQueryConfig})">
            <summary>
            注册Sql查询服务
            </summary>
            <typeparam name="TDatabase">IDatabase实现类型，提供数据库连接</typeparam>
            <param name="services">服务集合</param>
            <param name="action">Sql查询配置</param>
        </member>
        <member name="M:Util.Datas.Dapper.Extensions.AddSqlQuery``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Util.Datas.Dapper.Configs.SqlQueryConfig})">
            <summary>
            注册Sql查询服务
            </summary>
            <typeparam name="TDatabase">IDatabase实现类型，提供数据库连接</typeparam>
            <typeparam name="TEntityMatedata">IEntityMatedata实现类型,提供实体元数据解析</typeparam>
            <param name="services">服务集合</param>
            <param name="action">Sql查询配置</param>
        </member>
        <member name="M:Util.Datas.Dapper.Extensions.AddSqlQuery(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Util.Datas.Dapper.Configs.SqlQueryConfig},System.Type,System.Type)">
            <summary>
            注册Sql查询服务
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.Extensions.AddSqlBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection,Util.Datas.Dapper.Configs.SqlQueryConfig)">
            <summary>
            配置Sql生成器
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.Extensions.RegisterTypeHandlers">
            <summary>
            注册类型处理器
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.Extensions.AddMySqlDatabase(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            注册MySql数据库服务
            </summary>
            <param name="services">服务集合</param>
        </member>
        <member name="T:Util.Datas.Dapper.Handlers.StringTypeHandler">
            <summary>
            字符串类型处理器
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.Handlers.StringTypeHandler.SetValue(System.Data.IDbDataParameter,System.String)">
            <summary>
            设置值
            </summary>
            <param name="parameter">参数</param>
            <param name="value">值</param>
        </member>
        <member name="M:Util.Datas.Dapper.Handlers.StringTypeHandler.Parse(System.Object)">
            <summary>
            转换值
            </summary>
            <param name="value">值</param>
        </member>
        <member name="T:Util.Datas.Dapper.MySql.MySqlBuilder">
            <summary>
            MySql Sql生成器
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.MySql.MySqlBuilder.#ctor(Util.Datas.Matedatas.IEntityMatedata,Util.Datas.Sql.Queries.Builders.Abstractions.IParameterManager)">
            <summary>
            初始化Sql生成器
            </summary>
            <param name="matedata">实体元数据解析器</param>
            <param name="parameterManager">参数管理器</param>
        </member>
        <member name="M:Util.Datas.Dapper.MySql.MySqlBuilder.GetDialect">
            <summary>
            获取Sql方言
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.MySql.MySqlBuilder.New">
            <summary>
            创建Sql生成器
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.MySql.MySqlBuilder.CreateFromClause">
            <summary>
            创建From子句
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.MySql.MySqlBuilder.CreateJoinClause">
            <summary>
            创建Join子句
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.MySql.MySqlBuilder.CreatePagerSql(System.Text.StringBuilder)">
            <summary>
            创建分页Sql
            </summary>
        </member>
        <member name="T:Util.Datas.Dapper.MySql.MySqlDialect">
            <summary>
            MySql方言
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.MySql.MySqlDialect.SafeName(System.String)">
            <summary>
            获取安全名称
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.MySql.MySqlDialect.GetPrefix">
            <summary>
            获取参数前缀
            </summary>
        </member>
        <member name="T:Util.Datas.Dapper.MySql.MySqlFromClause">
            <summary>
            MySql From子句
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.MySql.MySqlFromClause.#ctor(Util.Datas.Sql.Queries.Builders.Abstractions.IDialect,Util.Datas.Sql.Queries.Builders.Abstractions.IEntityResolver,Util.Datas.Sql.Queries.Builders.Abstractions.IEntityAliasRegister)">
            <summary>
            初始化From子句
            </summary>
            <param name="dialect">方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体别名注册器</param>
        </member>
        <member name="M:Util.Datas.Dapper.MySql.MySqlFromClause.CreateSqlItem(System.String,System.String,System.String)">
            <summary>
            创建Sql项
            </summary>
            <param name="table">表名</param>
            <param name="schema">架构名</param>
            <param name="alias">别名</param>
        </member>
        <member name="T:Util.Datas.Dapper.MySql.MySqlJoinClause">
            <summary>
            MySql 表连接子句
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.MySql.MySqlJoinClause.#ctor(Util.Datas.Sql.Queries.Builders.Abstractions.IDialect,Util.Datas.Sql.Queries.Builders.Abstractions.IEntityResolver,Util.Datas.Sql.Queries.Builders.Abstractions.IEntityAliasRegister)">
            <summary>
            初始化MySql 表连接子句
            </summary>
            <param name="dialect">方言</param>
            <param name="resolver">实体解析器</param>
            <param name="register">实体注册器</param>
        </member>
        <member name="M:Util.Datas.Dapper.MySql.MySqlJoinClause.CreateJoinItem(System.String,System.String,System.String,System.String)">
            <summary>
            创建连接项
            </summary>
            <param name="joinType">连接类型</param>
            <param name="table">表名</param>
            <param name="schema">架构名</param>
            <param name="alias">别名</param>
        </member>
        <member name="T:Util.Datas.Dapper.PgSql.PgSqlBuilder">
            <summary>
            PgSql Sql生成器
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.PgSql.PgSqlBuilder.#ctor(Util.Datas.Matedatas.IEntityMatedata,Util.Datas.Sql.Queries.Builders.Abstractions.IParameterManager)">
            <summary>
            初始化Sql生成器
            </summary>
            <param name="matedata">实体元数据解析器</param>
            <param name="parameterManager">参数管理器</param>
        </member>
        <member name="M:Util.Datas.Dapper.PgSql.PgSqlBuilder.GetDialect">
            <summary>
            获取Sql方言
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.PgSql.PgSqlBuilder.New">
            <summary>
            创建Sql生成器
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.PgSql.PgSqlBuilder.CreatePagerSql(System.Text.StringBuilder)">
            <summary>
            创建分页Sql
            </summary>
        </member>
        <member name="T:Util.Datas.Dapper.PgSql.PgSqlDialect">
            <summary>
            PgSql方言
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.PgSql.PgSqlDialect.SafeName(System.String)">
            <summary>
            获取安全名称
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.PgSql.PgSqlDialect.GetPrefix">
            <summary>
            获取参数前缀
            </summary>
        </member>
        <member name="T:Util.Datas.Dapper.SqlQuery">
            <summary>
            Dapper Sql查询对象
            </summary>
        </member>
        <member name="F:Util.Datas.Dapper.SqlQuery.TraceLogName">
            <summary>
            跟踪日志名称
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.SqlQuery.#ctor(Util.Datas.Sql.Queries.Builders.Abstractions.ISqlBuilder,Util.Datas.Sql.IDatabase)">
            <summary>
            初始化Dapper Sql查询对象
            </summary>
            <param name="sqlBuilder">Sql生成器</param>
            <param name="database">数据库</param>
        </member>
        <member name="M:Util.Datas.Dapper.SqlQuery.ToScalar(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取单值
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.SqlQuery.ToScalarAsync(System.Data.IDbConnection,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            获取单值
            </summary>
            <param name="connection">数据库连接</param>
            <param name="sql">Sql语句</param>
            <param name="parameters">参数</param>
        </member>
        <member name="M:Util.Datas.Dapper.SqlQuery.To``1(System.Data.IDbConnection)">
            <summary>
            获取单个实体
            </summary>
            <typeparam name="TResult">实体类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Util.Datas.Dapper.SqlQuery.ToAsync``1(System.Data.IDbConnection)">
            <summary>
            获取单个实体
            </summary>
            <typeparam name="TResult">实体类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Util.Datas.Dapper.SqlQuery.ToList``1(System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Util.Datas.Dapper.SqlQuery.ToListAsync``1(System.Data.IDbConnection)">
            <summary>
            获取列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Util.Datas.Dapper.SqlQuery.ToPagerList``1(Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Util.Datas.Dapper.SqlQuery.SetPager(Util.Domains.Repositories.IPager)">
            <summary>
            设置分页参数
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.SqlQuery.ToPagerList``1(System.Int32,System.Int32,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="page">页数</param>
            <param name="pageSize">每页显示行数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Util.Datas.Dapper.SqlQuery.ToPagerListAsync``1(Util.Domains.Repositories.IPager,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="parameter">分页参数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Util.Datas.Dapper.SqlQuery.ToPagerListAsync``1(System.Int32,System.Int32,System.Data.IDbConnection)">
            <summary>
            获取分页列表
            </summary>
            <typeparam name="TResult">返回结果类型</typeparam>
            <param name="page">页数</param>
            <param name="pageSize">每页显示行数</param>
            <param name="connection">数据库连接</param>
        </member>
        <member name="M:Util.Datas.Dapper.SqlQuery.WriteTraceLog(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            写日志
            </summary>
            <param name="sql">Sql语句</param>
            <param name="parameters">参数</param>
        </member>
        <member name="M:Util.Datas.Dapper.SqlQuery.GetLog">
            <summary>
            获取日志操作
            </summary>
        </member>
        <member name="T:Util.Datas.Dapper.SqlServer.SqlServerBuilder">
            <summary>
            Sql Server Sql生成器
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.SqlServer.SqlServerBuilder.#ctor(Util.Datas.Matedatas.IEntityMatedata,Util.Datas.Sql.Queries.Builders.Abstractions.IParameterManager)">
            <summary>
            初始化Sql生成器
            </summary>
            <param name="matedata">实体元数据解析器</param>
            <param name="parameterManager">参数管理器</param>
        </member>
        <member name="M:Util.Datas.Dapper.SqlServer.SqlServerBuilder.GetDialect">
            <summary>
            获取Sql方言
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.SqlServer.SqlServerBuilder.New">
            <summary>
            创建Sql生成器
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.SqlServer.SqlServerBuilder.CreatePagerSql(System.Text.StringBuilder)">
            <summary>
            创建分页Sql
            </summary>
        </member>
        <member name="T:Util.Datas.Dapper.SqlServer.SqlServerDialect">
            <summary>
            Sql Server方言
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.SqlServer.SqlServerDialect.SafeName(System.String)">
            <summary>
            获取安全名称
            </summary>
        </member>
        <member name="M:Util.Datas.Dapper.SqlServer.SqlServerDialect.GetPrefix">
            <summary>
            获取参数前缀
            </summary>
        </member>
        <member name="T:Util.Datas.Ef.Configs.EfConfig">
            <summary>
            Ef配置
            </summary>
        </member>
        <member name="P:Util.Datas.Ef.Configs.EfConfig.EfLogLevel">
            <summary>
            Ef日志级别，默认值：EfLogLevel.Sql，表示仅输出Sql
            </summary>
        </member>
        <member name="T:Util.Datas.Ef.Configs.EfLogLevel">
            <summary>
            Ef日志级别
            </summary>
        </member>
        <member name="F:Util.Datas.Ef.Configs.EfLogLevel.All">
            <summary>
            输出全部日志，包括连接数据库，提交事务等大量信息
            </summary>
        </member>
        <member name="F:Util.Datas.Ef.Configs.EfLogLevel.Sql">
            <summary>
            仅输出Sql
            </summary>
        </member>
        <member name="F:Util.Datas.Ef.Configs.EfLogLevel.Off">
            <summary>
            关闭日志
            </summary>
        </member>
        <member name="T:Util.Datas.Ef.Core.CompactRepositoryBase`2">
            <summary>
            仓储 - 配合持久化对象使用
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TPo">持久化对象类型</typeparam>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`2.#ctor(Util.Datas.Stores.IStore{`1,System.Guid})">
            <summary>
            初始化仓储
            </summary>
            <param name="store">存储器</param>
        </member>
        <member name="T:Util.Datas.Ef.Core.CompactRepositoryBase`3">
            <summary>
            仓储 - 配合持久化对象使用
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TPo">持久化对象类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="F:Util.Datas.Ef.Core.CompactRepositoryBase`3._store">
            <summary>
            存储器
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.#ctor(Util.Datas.Stores.IStore{`1,`2})">
            <summary>
            初始化仓储
            </summary>
            <param name="store">存储器</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.ToEntity(`1)">
            <summary>
            将持久化对象转成实体
            </summary>
            <param name="po">持久化对象</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.ToPo(`0)">
            <summary>
            将实体转成持久化对象
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.Find(System.Object)">
            <summary>
            查找实体
            </summary>
            <param name="id">实体标识</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.FindAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            查找实体
            </summary>
            <param name="id">实体标识</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.FindByIds(`2[])">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">实体标识列表</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.FindByIds(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">实体标识列表</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.FindByIds(System.String)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.FindByIdsAsync(`2[])">
            <summary>
            查找实体集合
            </summary>
            <param name="ids">实体标识集合</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.FindByIdsAsync(System.Collections.Generic.IEnumerable{`2},System.Threading.CancellationToken)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.FindByIdsAsync(System.String)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.Exists(`2[])">
            <summary>
            判断实体是否存在
            </summary>
            <param name="ids">实体标识集合</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.ExistsAsync(`2[])">
            <summary>
            判断实体是否存在
            </summary>
            <param name="ids">实体标识集合</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.Add(`0)">
            <summary>
            添加实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            添加实体
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.AddAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            添加实体集合
            </summary>
            <param name="entities">实体集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.Update(`0)">
            <summary>
            修改实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改实体
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.UpdateAsync(`0)">
            <summary>
            修改实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改实体
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.Remove(System.Object)">
            <summary>
            移除实体
            </summary>
            <param name="id">实体标识</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.RemoveAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            移除实体
            </summary>
            <param name="id">实体标识</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.Remove(`0)">
            <summary>
            移除实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.RemoveAsync(`0,System.Threading.CancellationToken)">
            <summary>
            移除实体
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.Remove(System.Collections.Generic.IEnumerable{`2})">
            <summary>
            移除实体集合
            </summary>
            <param name="ids">实体编号集合</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.RemoveAsync(System.Collections.Generic.IEnumerable{`2},System.Threading.CancellationToken)">
            <summary>
            移除实体集合
            </summary>
            <param name="ids">实体编号集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            移除实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.CompactRepositoryBase`3.RemoveAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            移除实体集合
            </summary>
            <param name="entities">实体集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="T:Util.Datas.Ef.Core.IMap">
            <summary>
            映射
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.IMap.Map(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            映射配置
            </summary>
            <param name="builder">模型生成器</param>
        </member>
        <member name="T:Util.Datas.Ef.Core.MapBase`1">
            <summary>
            映射配置
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="P:Util.Datas.Ef.Core.MapBase`1.ModelBuilder">
            <summary>
            模型生成器
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.MapBase`1.Map(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            映射配置
            </summary>
            <param name="modelBuilder">模型生成器</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.MapBase`1.MapTable(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            映射表
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.MapBase`1.MapVersion(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            映射乐观离线锁
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.MapBase`1.MapProperties(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            映射属性
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.MapBase`1.MapAssociations(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            映射导航属性
            </summary>
        </member>
        <member name="T:Util.Datas.Ef.Core.QueryStoreBase`1">
            <summary>
            查询存储器
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`1.#ctor(Util.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化查询存储器
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="T:Util.Datas.Ef.Core.QueryStoreBase`2">
            <summary>
            查询存储器
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="F:Util.Datas.Ef.Core.QueryStoreBase`2._sqlQuery">
            <summary>
            Sql查询对象
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.#ctor(Util.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化查询存储器
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="P:Util.Datas.Ef.Core.QueryStoreBase`2.UnitOfWork">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="P:Util.Datas.Ef.Core.QueryStoreBase`2.Set">
            <summary>
            实体集
            </summary>
        </member>
        <member name="P:Util.Datas.Ef.Core.QueryStoreBase`2.Sql">
            <summary>
            Sql查询对象
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.FindAsNoTracking">
            <summary>
            获取未跟踪查询对象
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.Find">
            <summary>
            获取查询对象
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.Find(Util.Domains.Repositories.ICriteria{`0})">
            <summary>
            查询
            </summary>
            <param name="criteria">条件</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查询
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.Find(System.Object)">
            <summary>
            查找实体
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.FindAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            查找实体
            </summary>
            <param name="id">标识</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.FindByIds(`1[])">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.FindByIds(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.FindByIds(System.String)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdsAsync(`1[])">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdsAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">标识列表</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdsAsync(System.String)">
            <summary>
            查找实体列表
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdNoTracking(`1)">
            <summary>
            查找未跟踪单个实体
            </summary>
            <param name="id">标识</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdNoTrackingAsync(`1,System.Threading.CancellationToken)">
            <summary>
            查找未跟踪单个实体
            </summary>
            <param name="id">标识</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdsNoTracking(`1[])">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdsNoTracking(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdsNoTracking(System.String)">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdsNoTrackingAsync(`1[])">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdsNoTrackingAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="ids">标识列表</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.FindByIdsNoTrackingAsync(System.String)">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="ids">逗号分隔的标识列表，范例："1,2"</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.Single(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找单个实体
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.SingleAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Threading.CancellationToken)">
            <summary>
            查找单个实体
            </summary>
            <param name="predicate">条件</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.FindAll(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体列表
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.FindAllNoTracking(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.FindAllAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体列表
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.FindAllNoTrackingAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找实体列表,不跟踪
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            判断是否存在
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.Exists(`1[])">
            <summary>
            判断是否存在
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.ExistsAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            判断是否存在
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.ExistsAsync(`1[])">
            <summary>
            判断是否存在
            </summary>
            <param name="ids">标识列表</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找数量
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.CountAsync(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            查找数量
            </summary>
            <param name="predicate">条件</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.Query(Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.Query(System.Linq.IQueryable{`0},Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            获取查询结果
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.QueryAsync(Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.QueryAsNoTracking(Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            查询，不跟踪实体
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.QueryAsNoTrackingAsync(Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            查询，不跟踪实体
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.PagerQuery(Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            分页查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.PagerQueryAsync(Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            分页查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.PagerQueryAsNoTracking(Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            分页查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.QueryStoreBase`2.PagerQueryAsNoTrackingAsync(Util.Domains.Repositories.IQueryBase{`0})">
            <summary>
            分页查询
            </summary>
            <param name="query">查询对象</param>
        </member>
        <member name="T:Util.Datas.Ef.Core.RepositoryBase`1">
            <summary>
            仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Util.Datas.Ef.Core.RepositoryBase`1.#ctor(Util.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化仓储
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="T:Util.Datas.Ef.Core.RepositoryBase`2">
            <summary>
            仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
        </member>
        <member name="M:Util.Datas.Ef.Core.RepositoryBase`2.#ctor(Util.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化仓储
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="T:Util.Datas.Ef.Core.StoreBase`1">
            <summary>
            存储器
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`1.#ctor(Util.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化存储器
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="T:Util.Datas.Ef.Core.StoreBase`2">
            <summary>
            存储器
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <typeparam name="TKey">对象标识类型</typeparam>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.#ctor(Util.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化存储器
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.Add(`0)">
            <summary>
            添加实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.Add(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            添加实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.AddAsync(`0,System.Threading.CancellationToken)">
            <summary>
            添加实体
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.AddAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            添加实体集合
            </summary>
            <param name="entities">实体集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.Update(`0)">
            <summary>
            修改实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.Update(`0,`0)">
            <summary>
            修改实体
            </summary>
            <param name="newEntity">新实体</param>
            <param name="oldEntity">旧实体</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.ValidateVersion(`0,`0)">
            <summary>
            验证版本号
            </summary>
            <param name="newEntity">新实体</param>
            <param name="oldEntity">旧实体</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.UpdateAsync(`0)">
            <summary>
            修改实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.ValidateVersion(System.Collections.Generic.List{`0},System.Collections.Generic.List{`0})">
            <summary>
            验证版本号
            </summary>
            <param name="newEntities">新实体集合</param>
            <param name="oldEntities">旧实体集合</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.UpdateAsync(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            修改实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.Remove(System.Object)">
            <summary>
            移除实体
            </summary>
            <param name="id">实体标识</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.Delete(`0)">
            <summary>
            删除
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.RemoveAsync(System.Object,System.Threading.CancellationToken)">
            <summary>
            移除实体
            </summary>
            <param name="id">标识</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.Remove(`0)">
            <summary>
            移除实体
            </summary>
            <param name="entity">实体</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.RemoveAsync(`0,System.Threading.CancellationToken)">
            <summary>
            移除实体
            </summary>
            <param name="entity">实体</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.Remove(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            移除实体集合
            </summary>
            <param name="ids">标识集合</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.Delete(System.Collections.Generic.List{`0})">
            <summary>
            删除实体集合
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.RemoveAsync(System.Collections.Generic.IEnumerable{`1},System.Threading.CancellationToken)">
            <summary>
            移除实体集合
            </summary>
            <param name="ids">标识集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.Remove(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            移除实体集合
            </summary>
            <param name="entities">实体集合</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.StoreBase`2.RemoveAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            移除实体集合
            </summary>
            <param name="entities">实体集合</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="T:Util.Datas.Ef.Core.TreeCompactRepositoryBase`2">
            <summary>
            树型仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TPo">持久化对象类型</typeparam>
        </member>
        <member name="F:Util.Datas.Ef.Core.TreeCompactRepositoryBase`2._store">
            <summary>
            存储器
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.TreeCompactRepositoryBase`2.#ctor(Util.Datas.Stores.IStore{`1,System.Guid})">
            <summary>
            初始化树型仓储
            </summary>
            <param name="store">存储器</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.TreeCompactRepositoryBase`2.GenerateSortIdAsync(System.Nullable{System.Guid})">
            <summary>
            生成排序号
            </summary>
            <param name="parentId">父标识</param>
        </member>
        <member name="T:Util.Datas.Ef.Core.TreeCompactRepositoryBase`4">
            <summary>
            树型仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TPo">持久化对象类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="F:Util.Datas.Ef.Core.TreeCompactRepositoryBase`4._store">
            <summary>
            存储器
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.TreeCompactRepositoryBase`4.#ctor(Util.Datas.Stores.IStore{`1,`2})">
            <summary>
            初始化树型仓储
            </summary>
            <param name="store">存储器</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.TreeCompactRepositoryBase`4.GenerateSortIdAsync(`3)">
            <summary>
            生成排序号
            </summary>
            <param name="parentId">父标识</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.TreeCompactRepositoryBase`4.GetAllChildrenAsync(`0)">
            <summary>
            获取全部下级实体
            </summary>
            <param name="parent">父实体</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.TreeCompactRepositoryBase`4.FindByIdNoTrackingAsync(`2,System.Threading.CancellationToken)">
            <summary>
            查找未跟踪单个实体
            </summary>
            <param name="id">标识</param>
            <param name="cancellationToken">取消令牌</param>
        </member>
        <member name="T:Util.Datas.Ef.Core.TreeRepositoryBase`1">
            <summary>
            树型仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Util.Datas.Ef.Core.TreeRepositoryBase`1.#ctor(Util.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化树型仓储
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.TreeRepositoryBase`1.GenerateSortIdAsync(System.Nullable{System.Guid})">
            <summary>
            生成排序号
            </summary>
            <param name="parentId">父编号</param>
        </member>
        <member name="T:Util.Datas.Ef.Core.TreeRepositoryBase`3">
            <summary>
            树型仓储
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <typeparam name="TKey">实体标识类型</typeparam>
            <typeparam name="TParentId">父标识类型</typeparam>
        </member>
        <member name="M:Util.Datas.Ef.Core.TreeRepositoryBase`3.#ctor(Util.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            初始化树型仓储
            </summary>
            <param name="unitOfWork">工作单元</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.TreeRepositoryBase`3.GenerateSortIdAsync(`2)">
            <summary>
            生成排序号
            </summary>
            <param name="parentId">父编号</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.TreeRepositoryBase`3.GetAllChildrenAsync(`0)">
            <summary>
            获取全部下级实体
            </summary>
            <param name="parent">父实体</param>
        </member>
        <member name="T:Util.Datas.Ef.Core.UnitOfWorkBase">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="F:Util.Datas.Ef.Core.UnitOfWorkBase.Maps">
            <summary>
            映射字典
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.#cctor">
            <summary>
            初始化Entity Framework工作单元
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions,Util.Datas.UnitOfWorks.IUnitOfWorkManager)">
            <summary>
            初始化Entity Framework工作单元
            </summary>
            <param name="options">配置</param>
            <param name="manager">工作单元服务</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.GetConfig">
            <summary>
            获取配置
            </summary>
        </member>
        <member name="P:Util.Datas.Ef.Core.UnitOfWorkBase.Config">
            <summary>
            Ef配置
            </summary>
        </member>
        <member name="P:Util.Datas.Ef.Core.UnitOfWorkBase.TraceId">
            <summary>
            跟踪号
            </summary>
        </member>
        <member name="P:Util.Datas.Ef.Core.UnitOfWorkBase.Session">
            <summary>
            用户会话
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.OnConfiguring(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            配置
            </summary>
            <param name="builder">配置生成器</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.EnableLog(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder)">
            <summary>
            启用日志
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.GetLog">
            <summary>
            获取日志操作
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.IsEnabled(Util.Logs.ILog)">
            <summary>
            是否启用Ef日志
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.GetLogProvider(Util.Logs.ILog)">
            <summary>
            获取日志提供器
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            配置映射
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.GetMaps">
            <summary>
            获取映射配置列表
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.GetMapType">
            <summary>
            获取映射接口类型
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.GetMapsFromAssemblies">
            <summary>
            从程序集获取映射配置列表
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.GetAssemblies">
            <summary>
            获取定义映射配置的程序集列表
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.GetMapInstances(System.Reflection.Assembly)">
            <summary>
            获取映射实例列表
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.Commit">
            <summary>
            提交,返回影响的行数
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.CommitAsync">
            <summary>
            异步提交,返回影响的行数
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.SaveChanges">
            <summary>
            保存更改
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.SaveChangesBefore">
            <summary>
            保存更改前操作
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.InterceptAddedOperation(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            拦截添加操作
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.InitCreationAudited(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            初始化创建审计信息
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.GetSession">
            <summary>
            获取用户会话
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.InitModificationAudited(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            初始化修改审计信息
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.InterceptModifiedOperation(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            拦截修改操作
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.InterceptDeletedOperation(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            拦截删除操作
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.SaveChangesAsync(System.Threading.CancellationToken)">
            <summary>
            异步保存更改
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.GetConnection">
            <summary>
            获取数据库连接
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.GetTable(System.Type)">
            <summary>
            获取表名
            </summary>
            <param name="type">实体类型</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.GetSchema(System.Type)">
            <summary>
            获取架构
            </summary>
            <param name="type">实体类型</param>
        </member>
        <member name="M:Util.Datas.Ef.Core.UnitOfWorkBase.GetColumn(System.Type,System.String)">
            <summary>
            获取列名
            </summary>
            <param name="type">实体类型</param>
            <param name="property">属性名</param>
        </member>
        <member name="T:Util.Datas.Ef.Extensions">
            <summary>
            查询扩展
            </summary>
            <summary>
            服务扩展
            </summary>
            <summary>
            Ef工作单元扩展
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Extensions.ToPagerListAsync``1(System.Linq.IQueryable{``0},Util.Domains.Repositories.IPager)">
            <summary>
            转换为分页列表，包含排序分页操作
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
            <param name="source">数据源</param>
            <param name="pager">分页对象</param>
        </member>
        <member name="M:Util.Datas.Ef.Extensions.AddUnitOfWork``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.EntityFrameworkCore.DbContextOptionsBuilder},System.Action{Util.Datas.Ef.Configs.EfConfig},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            注册工作单元服务
            </summary>
            <typeparam name="TService">工作单元接口类型</typeparam>
            <typeparam name="TImplementation">工作单元实现类型</typeparam>
            <param name="services">服务集合</param>
            <param name="configAction">配置操作</param>
            <param name="efConfigAction">Ef配置操作</param>
            <param name="configuration">配置</param>
        </member>
        <member name="M:Util.Datas.Ef.Extensions.GetDbType``1">
            <summary>
            获取数据库类型
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Extensions.AddUnitOfWork``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,Util.Datas.Ef.Configs.EfLogLevel)">
            <summary>
            注册工作单元服务
            </summary>
            <typeparam name="TService">工作单元接口类型</typeparam>
            <typeparam name="TImplementation">工作单元实现类型</typeparam>
            <param name="services">服务集合</param>
            <param name="connection">连接字符串</param>
            <param name="level">Ef日志级别</param>
        </member>
        <member name="M:Util.Datas.Ef.Extensions.ConfigConnection``1(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.String)">
            <summary>
            配置连接字符串
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Extensions.AddUnitOfWork``2(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            注册工作单元服务
            </summary>
            <typeparam name="TService">工作单元接口类型</typeparam>
            <typeparam name="TImplementation">工作单元实现类型</typeparam>
            <param name="services">服务集合</param>
            <param name="connection">连接字符串</param>
            <param name="configuration">配置</param>
        </member>
        <member name="M:Util.Datas.Ef.Extensions.ClearCache(Util.Datas.UnitOfWorks.IUnitOfWork)">
            <summary>
            清空缓存
            </summary>
        </member>
        <member name="T:Util.Datas.Ef.Internal.Helper">
            <summary>
            工具操作
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Internal.Helper.InitVersion(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            初始化版本号
            </summary>
        </member>
        <member name="T:Util.Datas.Ef.Logs.EfLog">
            <summary>
            Ef日志记录器
            </summary>
        </member>
        <member name="F:Util.Datas.Ef.Logs.EfLog.TraceLogName">
            <summary>
            Ef跟踪日志名
            </summary>
        </member>
        <member name="F:Util.Datas.Ef.Logs.EfLog._log">
            <summary>
            日志操作
            </summary>
        </member>
        <member name="F:Util.Datas.Ef.Logs.EfLog._unitOfWork">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="F:Util.Datas.Ef.Logs.EfLog._category">
            <summary>
            日志分类
            </summary>
        </member>
        <member name="F:Util.Datas.Ef.Logs.EfLog._config">
            <summary>
            Ef配置
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Logs.EfLog.#ctor(Util.Logs.ILog,Util.Datas.Ef.Core.UnitOfWorkBase,System.String,Util.Datas.Ef.Configs.EfConfig)">
            <summary>
            初始化Ef日志记录器
            </summary>
            <param name="log">日志操作</param>
            <param name="unitOfWork">工作单元</param>
            <param name="category">日志分类</param>
            <param name="config">Ef配置</param>
        </member>
        <member name="M:Util.Datas.Ef.Logs.EfLog.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            日志记录
            </summary>
            <typeparam name="TState">状态类型</typeparam>
            <param name="logLevel">日志级别</param>
            <param name="eventId">事件编号</param>
            <param name="state">状态</param>
            <param name="exception">异常</param>
            <param name="formatter">日志内容</param>
        </member>
        <member name="M:Util.Datas.Ef.Logs.EfLog.IsEnabled(Microsoft.Extensions.Logging.EventId)">
            <summary>
            是否启用Ef日志
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Logs.EfLog.AddContent``1(``0)">
            <summary>
            添加日志内容
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Logs.EfLog.AddDictionary(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            添加字典内容
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Logs.EfLog.GetValue(System.Collections.Generic.IDictionary{System.String,System.String},System.String)">
            <summary>
            获取值
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Logs.EfLog.AddElapsed(System.String)">
            <summary>
            添加执行时间
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Logs.EfLog.AddSql(System.String)">
            <summary>
            添加Sql
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Logs.EfLog.AddSqlParams(System.String)">
            <summary>
            添加Sql参数
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Logs.EfLog.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            是否启用
            </summary>
            <param name="logLevel">日志级别</param>
        </member>
        <member name="M:Util.Datas.Ef.Logs.EfLog.BeginScope``1(``0)">
            <summary>
            起始范围
            </summary>
        </member>
        <member name="T:Util.Datas.Ef.Logs.EfLogProvider">
            <summary>
            Ef日志提供器
            </summary>
        </member>
        <member name="F:Util.Datas.Ef.Logs.EfLogProvider._log">
            <summary>
            日志操作
            </summary>
        </member>
        <member name="F:Util.Datas.Ef.Logs.EfLogProvider._unitOfWork">
            <summary>
            工作单元
            </summary>
        </member>
        <member name="F:Util.Datas.Ef.Logs.EfLogProvider._config">
            <summary>
            Ef配置
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Logs.EfLogProvider.#ctor(Util.Logs.ILog,Util.Datas.Ef.Core.UnitOfWorkBase,Util.Datas.Ef.Configs.EfConfig)">
            <summary>
            初始化Ef日志提供器
            </summary>
            <param name="log">日志操作</param>
            <param name="unitOfWork">工作单元</param>
            <param name="config">Ef配置</param>
        </member>
        <member name="M:Util.Datas.Ef.Logs.EfLogProvider.CreateLogger(System.String)">
            <summary>
            初始化Ef日志提供器
            </summary>
            <param name="category">日志分类</param>
        </member>
        <member name="M:Util.Datas.Ef.Logs.EfLogProvider.Dispose">
            <summary>
            释放
            </summary>
        </member>
        <member name="T:Util.Datas.Ef.Logs.NullLogger">
            <summary>
            空日志记录器
            </summary>
        </member>
        <member name="F:Util.Datas.Ef.Logs.NullLogger.Instance">
            <summary>
            空日志记录器实例
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Logs.NullLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            日志记录
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.Logs.NullLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            是否启用
            </summary>
            <param name="logLevel">日志级别</param>
        </member>
        <member name="M:Util.Datas.Ef.Logs.NullLogger.BeginScope``1(``0)">
            <summary>
            起始范围
            </summary>
        </member>
        <member name="T:Util.Datas.Ef.MySql.AggregateRootMap`1">
            <summary>
            聚合根映射配置
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Util.Datas.Ef.MySql.AggregateRootMap`1.MapVersion(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            映射乐观离线锁
            </summary>
        </member>
        <member name="T:Util.Datas.Ef.MySql.EntityMap`1">
            <summary>
            实体映射配置
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Util.Datas.Ef.MySql.IMap">
            <summary>
            映射
            </summary>
        </member>
        <member name="T:Util.Datas.Ef.MySql.UnitOfWork">
            <summary>
            MySql工作单元
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.MySql.UnitOfWork.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions,Util.Datas.UnitOfWorks.IUnitOfWorkManager)">
            <summary>
            初始化MySql工作单元
            </summary>
            <param name="options">配置</param>
            <param name="manager">工作单元服务</param>
        </member>
        <member name="M:Util.Datas.Ef.MySql.UnitOfWork.GetMapType">
            <summary>
            获取映射接口类型
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.MySql.UnitOfWork.GetMapInstances(System.Reflection.Assembly)">
            <summary>
            获取映射实例列表
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:Util.Datas.Ef.MySql.UnitOfWork.InterceptAddedOperation(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            拦截添加操作
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.MySql.UnitOfWork.InterceptModifiedOperation(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            拦截修改操作
            </summary>
        </member>
        <member name="T:Util.Datas.Ef.PgSql.AggregateRootMap`1">
            <summary>
            聚合根映射配置
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Util.Datas.Ef.PgSql.AggregateRootMap`1.MapVersion(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            映射乐观离线锁
            </summary>
        </member>
        <member name="T:Util.Datas.Ef.PgSql.EntityMap`1">
            <summary>
            实体映射配置
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Util.Datas.Ef.PgSql.IMap">
            <summary>
            映射
            </summary>
        </member>
        <member name="T:Util.Datas.Ef.PgSql.UnitOfWork">
            <summary>
            PgSql工作单元
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.PgSql.UnitOfWork.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions,Util.Datas.UnitOfWorks.IUnitOfWorkManager)">
            <summary>
            初始化PgSql工作单元
            </summary>
            <param name="options">配置</param>
            <param name="manager">工作单元服务</param>
        </member>
        <member name="M:Util.Datas.Ef.PgSql.UnitOfWork.GetMapType">
            <summary>
            获取映射接口类型
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.PgSql.UnitOfWork.GetMapInstances(System.Reflection.Assembly)">
            <summary>
            获取映射实例列表
            </summary>
            <param name="assembly">程序集</param>
        </member>
        <member name="M:Util.Datas.Ef.PgSql.UnitOfWork.InterceptAddedOperation(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            拦截添加操作
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.PgSql.UnitOfWork.InterceptModifiedOperation(Microsoft.EntityFrameworkCore.ChangeTracking.EntityEntry)">
            <summary>
            拦截修改操作
            </summary>
        </member>
        <member name="T:Util.Datas.Ef.SqlServer.AggregateRootMap`1">
            <summary>
            聚合根映射配置
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="M:Util.Datas.Ef.SqlServer.AggregateRootMap`1.MapVersion(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{`0})">
            <summary>
            映射乐观离线锁
            </summary>
        </member>
        <member name="T:Util.Datas.Ef.SqlServer.EntityMap`1">
            <summary>
            实体映射配置
            </summary>
            <typeparam name="TEntity">实体类型</typeparam>
        </member>
        <member name="T:Util.Datas.Ef.SqlServer.IMap">
            <summary>
            映射
            </summary>
        </member>
        <member name="T:Util.Datas.Ef.SqlServer.UnitOfWork">
            <summary>
            SqlServer工作单元
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.SqlServer.UnitOfWork.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions,Util.Datas.UnitOfWorks.IUnitOfWorkManager)">
            <summary>
            初始化SqlServer工作单元
            </summary>
            <param name="options">配置</param>
            <param name="manager">工作单元服务</param>
        </member>
        <member name="M:Util.Datas.Ef.SqlServer.UnitOfWork.GetMapType">
            <summary>
            获取映射接口类型
            </summary>
        </member>
        <member name="M:Util.Datas.Ef.SqlServer.UnitOfWork.GetMapInstances(System.Reflection.Assembly)">
            <summary>
            获取映射实例列表
            </summary>
            <param name="assembly">程序集</param>
        </member>
    </members>
</doc>
